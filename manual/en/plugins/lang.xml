<?xml version="1.0" encoding="UTF-8"?>
<chapter id="lang" xmlns="http://docbook.org/ns/docbook">
	<title>Lang</title>
	<para>
		The Lang plugin adds translation features to Atomik.
	</para>
	<para>
		This plugin is gettext-like. You write your application in its default language and then
		provide translations for each part of text.
	</para>
	<sect1 id="language-files">
		<title>Creating language files</title>
		<para>
			A language file provides translation from one language to another.
		</para>
		<para>
			They are stored in the <filename>app/languages</filename> directory. This can
			be changed using the <quote>dir</quote> configuration key. Files be named after
			the first part of the locale. For example, if the file provide translation to French, it has to be
			named <filename>fr.php</filename> (because the locale is fr-fr).
		</para>
		<para>
			In the language file you must defined messages using the 
			<methodname>LangPlugin::setMessages()</methodname> method. The messages is made of
			the string of the original language and the translated one.
		</para>
		<example>
			<title>A translation file</title>
			<programlisting>
				<![CDATA[
<?php
LangPlugin::setMessages(array(
	'hello' => 'bonjour',
	'how are you?' => 'comment ca va?'
));]]>
			</programlisting>
		</example>
	</sect1>
	<sect1 id="lang-detection">
		<title>Detecting the user language</title>
		<para>
			By default, the plguin will autodetect the language using HTTP headers. This can be turned off
			by setting false to the <quote>autodetect</quote> configuration key.
		</para>
		<para>
			If the language cannot be detected, it will fall back on the default language defined in the
			<quote>language</quote> configuration key.
		</para>
		<para>
			You can also set the language manually using <methodname>LangPlugin::set()</methodname>.
		</para>
		<example>
			<title>Setting the language manually</title>
			<programlisting>
				<![CDATA[
LangPlugin::set('fr');]]>
			</programlisting>
		</example>
		<para>
			The current language is available from the global store under the <quote>language</quote> key.
		</para>
		<example>
			<title>Retreiving the current language</title>
			<programlisting>
				<![CDATA[
$currentLanguage = A('language');]]>
			</programlisting>
		</example>
	</sect1>
	<sect1 id="translate">
		<title>Translating strings</title>
		<para>
			To enable translation for a string use the <methodname>LangPlugin::_()</methodname> method.
		</para>
		<example>
			<title>Translating a string</title>
			<programlisting>
				<![CDATA[
LangPlugin::set('fr');
echo LangPlugin::_('hello'); // will echo bonjour
echo LangPlugin::_('how are you?'); // will echo comment ca va?]]>
			</programlisting>
		</example>
		<para>
			A shortcut function is also defined: <function>__()</function>.
		</para>
		<example>
			<title>Translating a string using the shortcut function</title>
			<programlisting>
				<![CDATA[
LangPlugin::set('fr');
echo __('hello'); // will echo bonjour
echo __('how are you?'); // will echo comment ca va?]]>
			</programlisting>
		</example>
		<para>
			This method can also be use like the <function>vsprintf()</function> function. It can replace
			patterns in the string by values provided as an array as the second argument.
		</para>
		<example>
			<title>Translating a string with replacements</title>
			<programlisting>
				<![CDATA[
echo __('hello %s', array('Peter'));]]>
			</programlisting>
		</example>
	</sect1>
</chapter>