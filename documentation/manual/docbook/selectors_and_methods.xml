<?xml version="1.0" encoding="UTF-8"?>
<chapter id="selectors-and-methods" xmlns="http://docbook.org/ns/docbook">
	<title>Selectors and methods</title>
	<sect1 id="selectors">
		<para>
			Selectors are inspired from Javascript frameworks which uses CSS selectors to 
			select object in the DOM.
		</para>
		<para>
			Atomik Selectors allow you to select any kind of data or object.
		</para>
		<para>
			You've already encountered selectors when you discovered accessors.
			Selectors are available through the <methodname>Atomik::get()</methodname> method.
		</para>
		<para>
			Namespaces are used to differentiate selectors. A namespace is only a word followed
			by <quote>:</quote> at the beggining of the selector.
		</para>
		<example>
			<title>Using the flash selector</title>
			<programlisting>
				<![CDATA[
Atomik::flash('my message', 'label');
$messages = A('flash:label');]]>
			</programlisting>
		</example>
		<para>
			Plugins can provide their own selector namespace. For example, the Db plugin brings
			the <quote>db</quote> namespace which allow you to do sql queries.
		</para>
		<example>
			<title>Using the selector provided by the Db plugin</title>
			<programlisting>
				<![CDATA[
// selecting a value from the global store
$value = A('key1/key2/key3');

// selecting all posts
$allPosts = A('db:SELECT * FROM posts');

// selecting the first post
$firstPost = A('db:SELECT * FROM posts WHERE id = ?', array(1));]]>
			</programlisting>
		</example>
		<para>
			See the Db plugin documentation for more information. 
		</para>
		<para>
			To register a namespace use <methodname>Atomik::registerSelector()</methodname> which takes
			as first parameter the namespace prefix and as second a callback. When used, the callback will
			be called with as arguments the same one used with <methodname>Atomik::get()</methodname>.
			However, the namespace prefix will be stripped off the first parameter, which is the "query" string.
		</para>
		<example>
			<title>Registering a method</title>
			<programlisting>
				<![CDATA[
function my_selector($string) {
	return strtoupper($string);
}
Atomik::registerSelector('up', 'my_selector');
echo A('up:hello world'); // HELLO WORLD]]>
			</programlisting>>
		</example>
	</sect1>
	<sect1 id="methods">
		<title>Methods</title>
		<para>
			The Atomik class has a lot of methods to do many things. They are easy to remember because
			you only need to do Atomik::something(). Since version 2.2, it is possible to add custom
			methods to the class. This feature works best with PHP 5.3 but can work (with limitations)
			with previous versions.
		</para>
		<para>
			Registering a method is as simple as calling <methodname>Atomik::registerMethod()</methodname>.
			It takes as first argument the method name and as second a callback.
		</para>
		<example>
			<title>Registering a method</title>
			<programlisting>
				<![CDATA[
function my_callback() {
	echo 'call from myMethod()';
}
Atomik::registerMethod('myMethod', 'my_callback');]]>
			</programlisting>
			<para>
				If you have PHP 5.3 you can use anonymous functions:
			</para>
			<programlisting>
				<![CDATA[
Atomik::registerMethod('myMethod', function() {
	echo 'call from myMethod()';
});]]>
			</programlisting>
		</example>
		<para>
			Calling a registered method is like calling any other method of the <classname>Atomik</classname> class.
		</para>
		<example>
			<title>Calling a method</title>
			<programlisting>
				<![CDATA[
Atomik::myMethod();]]>
			</programlisting>
		</example>
		<para>
			However this only works with PHP 5.3. With previous versions you'll need to use 
			<methodname>Atomik::call()</methodname>.
		</para>
		<example>
			<title>Calling a method using <methodname>Atomik::call()</methodname></title>
			<programlisting>
				<![CDATA[
Atomik::call('myMethod');
Atomik::call('myMethod', $arg1, $arg2); // with arguments]]>
			</programlisting>
		</example>
	</sect1>
</chapter>
