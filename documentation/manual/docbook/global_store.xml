<?xml version="1.0" encoding="UTF-8"?>
<chapter id="global-store" xmlns="http://docbook.org/ns/docbook">
	<title>The global store</title>
	<para>
		Atomik offers a global store where anything can be saved for the time of a request.
		This global store acts like an associative array with key/value pairs.
		It's mainly use to store the configuration.
	</para>
	<sect1 id="accessors">
		<title>Accessing the store</title>
		<para>
			Accessors are methods provided by the Atomik class that allow you to 
			access the global store. They are five of them: <methodname>get</methodname>, 
			<methodname>set</methodname>, <methodname>add</methodname>, 
			<methodname>has</methodname> and <methodname>delete</methodname>.
		</para>
		<para>
			The <methodname>get</methodname> method allows you to retreive the value
			associated to the key passed as first argument. If a second argument is 
			specified it will be use as a default value in the case where the key is
			not found.
		</para>
		<para>
			Atomik also defines the <function>A()</function> function for quicker access. This
			function is only a shortcut to <methodname>Atomik::get()</methodname>.
		</para>
		<example>
			<title>Using the <methodname>get</methodname> method</title>
			<programlisting>
				<![CDATA[
echo Atomik::get('key');
echo Atomik::get('keyThatDoesntExist', 'defaultValue');
echo A('key');]]>
			</programlisting>
		</example>
		<note>
			There's also a <methodname>Atomik::getRef()</methodname> method to obtain a
			reference to the value. However this method do not have a default value parameter
			and it will return null if the key is not found.
		</note>
		<para>
			The <methodname>set</methodname> method allows you to define a key and its
			associated value. It will overwrite an existing value.
		</para>
		<para>
			This accessor can also take an array as argument to set multiple key/value pairs
			at once. This array will be merged with the store.
		</para>
		<example>
			<title>Using the <methodname>set</methodname> method</title>
			<para>
				Setting one key
			</para>
			<programlisting>
				<![CDATA[
Atomik::set('key', 'value');]]>
			</programlisting>
			<para>
				Setting multiple keys
			</para>
			<programlisting>
				<![CDATA[
Atomik::set(array(
	'key1' => 'value1',
	'key2' => 'value2'
));]]>
			</programlisting>
		</example>
		<para>
			The <methodname>add</methodname> method works like the <methodname>set</methodname>
			method but rather than replacing values when they already exists, adds them. For
			example if the key points to an array, the value will be added to this array as a new
			item. If the key points to a value which is not an array, it will be transformed to
			one.
		</para>
		<example>
			<title>Using the <methodname>add</methodname> method</title>
			<programlisting>
				<![CDATA[
Atomik::set('key1', array('item1'));
Atomik::add('key1', 'item2');
Atomik::add('key1', array('item3', 'item4'));
$array = Atomik::get('key1'); // array('item1', 'item2', 'item3', 'item4')]]>
			</programlisting>
		</example>
		<para>
			The <methodname>has</methodname> and <methodname>delete</methodname>
			methods only take a key as argument. The first one checks if the key exists
			and the second delete the key and its value.
		</para>
		<example>
			<title>Using the <methodname>has</methodname> and <methodname>delete</methodname> methods</title>
			<programlisting>
				<![CDATA[
if (Atomik::has('key')) {
	Atomik::delete('key');
}]]>
			</programlisting>
		</example>
	</sect1>
	<sect1 id="path-in-keys">
		<title>Using paths in keys</title>
		<para>
			Paths can be used to access nested arrays. Each key in the path has to point to a nested
			array unless it's the last one. Keys are separated by a slash. 
		</para>
		<example>
			<title>Using paths</title>
			<programlisting>
				<![CDATA[
Atomik::set('users', array(
	'paul' => array(
		'id' => 1,
		'age' => 20
	),
	'peter' => array(
		'id' => 2,
		'age' => 33
	)
));

$paul = Atomik::get('users/paul'); // returns an array
$paulAge = Atomik::get('users/paul/age'); // returns 20
$peterId = Atomik::get('users/peter/id'); // returns 2

Atomik::set('users/sofia', array(
	'id' => 3,
	'age' => 25
));

$sofiaAge = Atomik::get('users/sofia/age');]]>
			</programlisting>
		</example>
		<para>
			You can also use paths in sub arrays when setting some values.
		</para>
		<example>
			<title>Using paths when setting values</title>
			<programlisting>
				<![CDATA[
Atomik::set(array(
	'users' => array(
		'paul/age' => 22,
		'paul/friends' => array(
			'peter/age' => 20
		)
	)
));

echo Atomik::get('users/paul/age'); // 22

var_export(Atomik::get('users/paul/friends'));
array(
	'peter' => array(
		'age' => 20
	)
)]]>
			</programlisting>
		</example>
		<note>
			If the value of a key is an array with slashes in it (eg: routes) you can't use an array
			as first parameter. You must set the value by specifying the key as first parameter. Indeed,
			when doing that, the value is not dimensionized, so it can be anything.
		</note>
		<note>
			<methodname>Atomik::_dimensionizeArray()</methodname> can be used to <quote>dimensionize</quote> any array.
		</note>
	</sect1>
	<sect1 id="accessors-with-any-arrays">
		<title>Using accessors with any array</title>
		<para>
			Accessors can be used with any array. You need to pass as argument an array
			(the position of the argument depends on the method). See the API guide for 
			more information. Still, here's an example:
		</para>
		<example>
			<title>Using accessors with any array</title>
			<programlisting>
				<![CDATA[
$array = array();

Atomik::set('key', 'value', $array);

echo Atomik::get('key', null, $array);]]>
			</programlisting>
		</example>
	</sect1>
</chapter>
