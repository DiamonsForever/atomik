<?xml version="1.0" encoding="UTF-8"?>
<chapter id="urls" xmlns="http://docbook.org/ns/docbook">
	<title>URLs</title>
	<sect1 id="url-calling-action">
		<title>Calling an action</title>
		<para>
			Atomik provides a simple url mechanism. Whatever the page is, the url
			must always point to Atomik script, i.e. <filename>index.php</filename>
		</para>
		<para>
			The url should contain a parameter which specify which action to trigger.
			This parameter can be modified in the configuration (using the <quote>atomik/trigger</quote> key) 
			but its default name is <quote>action</quote>.
		</para>
		<para>
			The value of the parameter must only contain the action name
			without any extension. So for example if you have an <filename>home.php</filename>
			file in the <filename>app/actions</filename> directory or/and an 
			<filename>home.php</filename> file in the <filename>app/views</filename>
			directory, you must use <quote>home</quote> as parameter to call this action.
			Thus, the url should look like <link>http://example.com/index.php?action=home</link>.
		</para>
		<para>
			For an action to be callable, an action file or a view file must at least exist.
		</para>
		<para>
			If the action parameter is not found in the query string, Atomik will use the default
			action defined in its configuration (the <quote>atomik/default_action</quote> key).
			The default is <quote>index</quote>.
		</para>
		<para>
			For cleaner and prettier url you can use url rewriting. When using Apache, simply copy the 
			code below into a <filename>.htaccess</filename> file in the same directory as Atomik's core file.
			<programlisting>
RewriteEngine on
RewriteRule ^app/plugins/(.+)/assets - [L]
RewriteRule ^app/ - [L,F]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php?action=$1 [L,QSA]
			</programlisting>
			This code will also prevents access to the <filename>app</filename> folder from the web but
			allow access to <filename>assets</filename> directories provided by plugins.
		</para>
		<para>
			When using url rewriting, you can access pages by directly appending the name to the base url.
			Eg: <link>http://example.com/home</link>
		</para>
		<para>
			The action that has been called can be found in the configuration key named <quote>request_uri</quote>.
			The base url of the website (ie. the path before the root of the site) can be found in the 
			<quote>base_url</quote> key.
		</para>
	</sect1>
	<sect1 id="url-router">
		<title>Routing urls</title>
		<sect2 id="creating-routes">
			<title>Creating routes</title>
			<para>
				It is now a common practice to use pretty urls. This can easily be done using Atomik's router.
				The router map urls to actions and allows you to extract parameters from these urls. An url and its
				parameters is called a route.
			</para>
			<para>
				Routes are defined in the <quote>routes</quote> configuration key.
				The action must be specified as a parameter named <quote>action</quote>.
			</para>
			<note>
				You can't set routes using an array as first parameter of <methodname>Atomik::set()</methodname>.
				If not, the array will be dimensionize and the router won't work.
			</note>
			<example>
				<title>Simple route</title>
				<programlisting>
					<![CDATA[
Atomik::set('routes', array(
   'user/add' => array(
       'action' => 'user_add'
   )
));]]>
				</programlisting>
			</example>
			<para>
				As you see, the route is define as the array key and its parameters are defined in
				the sub array. You can add an unlimited numbers of parameters to the route. There
				must be at least action parameter for the route to be valid.
			</para>
			<para>
				The real magic of the routes is the possibility to assign a parameter value with
				a segment of the uri. This is done by specifying a parameter name prefixed with <quote>:</quote>
				inside an uri segment (ie. between slashes).
			</para>
			<para>
				Parameters defined as uri segments can be optional if they are also defined in the
				parameters list.
			</para>
			<example>
				<title>A route with some parameters</title>
				<programlisting>
					<![CDATA[
Atomik::set('routes', array(
   'archives/:year/:month' => array(
       'action' => 'archives',
       'month' => 'all'
   )
));]]>
				</programlisting>
				<para>
					In this route, the month parameter is optional but not the year. Thus, possibles urls are
					<link>http://example.com/archives/2008</link> or <link>http://example.com/archives/2008/02</link>.
					In these case the year parameter will have the <quote>2008</quote> value and the month parameter in the 
					second example will have <quote>02</quote> as value.
				</para>
			</example>
			<note>
				<para>
					Routes are match in reverse order.
				</para>
			</note>
		</sect2>
		<sect2 id="routes-parameters">
			<title>Retrieving route parameters</title>
			<para>
				Once the routing process is done, a configuration key named <quote>request</quote> is available. It contains
				an associative array with parameters and their value.
			</para>
			<example>
				<title>A route with some parameters</title>
				<programlisting>
					<![CDATA[
$params = Atomik::get('request');
$year = Atomik::get('request/year');]]>
				</programlisting>
			</example>
		</sect2>
	</sect1>
	<sect1 id="url-method">
		<title>Building urls with <methodname>Atomik::url()</methodname></title>
		<para>
			Directly writing url into your code can lead to problems. When using a layout for example, it is hard to know the
			relative location of the current view to include stylesheets for example. Some urls also needs lots of concatanation
			when using parameters and this can make the code less readable.
		</para>
		<para>
			<methodname>Atomik::url()</methodname> tries to resolve those problems by providing three things:
			<itemizedlist>
				<listitem>Prepends the base url</listitem>
				<listitem>Do not use <filename>index.php</filename> in the url if url rewriting is enabled (or use it if not)</listitem>
				<listitem>Handles url parameters</listitem>
			</itemizedlist>
		</para>
		<para>
			The method works best with relative or absolute urls. It can however also works with full urls. In this case, the two first 
			points won't be applied.
		</para>
		<example>
			<title>Building simple urls</title>
			<programlisting>
				<![CDATA[
$url = Atomik::url('home'); // /index.php?action=home if no url rewriting or /home otherwise
$url = Atomik::url('/user/dashboard'); // /user/dashboard
$url = Atomik::url('http://example.com'); // http://example.com]]>
			</programlisting>
		</example>
		<para>
			You can add GET parameters to the url using an array as the second argument.
		</para>
		<example>
			<title>Building urls with parameters</title>
			<programlisting>
				<![CDATA[
$url = Atomik::url('archives', array('year' => 2008)); // /index.php?action=archives&year=2008 if no url rewriting or /archives?year=2008 otherwise
$url = Atomik::url('archives?year=2008', array('month' => 02)); // /archives?year=2008&month=02]]>
			</programlisting>
		</example>
		<para>
			The method also allows you to use embedded parameters. These are parameters in the uri. The name of the parameter must be prepended
			with <quote>:</quote>.
		</para>
		<example>
			<title>Building urls with embedded parameters</title>
			<programlisting>
				<![CDATA[
$url = Atomik::url('archives/:year', array('year' => 2008)); // /index.php?action=archives/2008 if no url rewriting or /archives/2008 otherwise
$url = Atomik::url('archives/:year', array('year' => 2008, 'month' => 02)); // /archives/2008?month=02]]>
			</programlisting>
		</example>
		<para>
			Finally, when creating urls that point to resources you'll never want them to have the <filename>index.php</filename> part in them.
			To prevent that you can use the <methodname>Atomik::asset()</methodname> method. It works exactly the same as 
			<methodname>Atomik::url()</methodname> but will never use <filename>index.php</filename> in the url.
		</para>
	</sect1>
</chapter>
