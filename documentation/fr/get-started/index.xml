<?xml version="1.0" encoding="UTF-8"?>
<book id="get-started" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
<!--
Traduction : eNRgie pour Atomik framework
Traduction non définitive, soumise à des changements.
-->
	<title>Démarrer avec Atomik 2.2</title>
	<para>
		Dans ce tutoriel, vous allez apprendre à créer une application simple en utilisant Atomik 2.2. 
		Cela ne va pas vous prendre beaucoup de temps, environ 15 minutes.
	</para>
	<para>
		Notre blog va lister des messages et nous permettre d'en créer des nouveaux.
		Il va utiliser une base de données pour stocker nos messages. Nous allons donc utiliser un plugin.
	</para>
	<para>
		Ce tutoriel est sous license Creative Commons Attribution 3.0 License.
	</para>
	<chapter id="download-installtion">
		<title>Téléchargement et installation</title>
		<sect1>
			<title>Téléchargement</title>
			<para>
				Quand vous utilisez Atomik, créer votre application commence en ligne. En effet, vous pouvez utiliser ce site
				pour créer une distribution d'Atomik Framework avec ses plugins préinstallés et une configuration personnalisée.
			</para>
			<para>
				D'abord, rendez-vous sur le site d'Atomik en suivant ce <link xlink:href="http://www.atomikframework.com">lien</link>.
				Rendez-vous dans la section <quote>Plugins</quote>. Dans la catégorie <quote>Official</quote> (la catégorie par défault), et trouvez le plugin <quote>Db</quote>. Cliquez sur le
				lien <quote>Add to my distribution</quote>.
			</para>
			<para>
				Maintenant, allez à la section <quote>Download</quote>. Le plugin Db devrait être présent dans la liste de vos plugins inclus. Laissez toutes les options sur
				leurs valeurs par défault et cliquez sur le bouton <quote>Download</quote> en bas de la page.
			</para>
		</sect1>
		<sect1>
			<title>Installation</title>
			<para>
				Extrayez l'archive téléchargée.
			</para>
			<para>
				Copiez le contenu de l'archive extraite sur votre serveur web, à sa racine. Regardez la documentation du serveur web pour plus d'informations
				à ce propos.
			</para>
			<para>
				Rendez-vous sur votre site web. Nous supposons que c'est <link xlink:href="http://localhost">http://localhost</link>.
				Vous devez voir le message suivant: <quote>Congratulations, you're ready to roll!</quote>.
			</para>
			<para>
				Atomik Framework fournit une structure et une disposition prédéfinie. Nous allons laisser ces 
				paramètres intacts, sauf indication.
			</para>
		</sect1>
	</chapter>
	<chapter id="database">
		<title>Création et configuration de la base de donnée</title>
		<para>
			Comme nous l'avons dit précédamment, notre blog aura besoin d'une base de données. D'abord, créons la base de données avec le code SQL suivant:
		</para>
		<programlisting>
			<![CDATA[
CREATE TABLE posts (
	id 				INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
	publish_date 	DATETIME NOT NULL,
	title 			VARCHAR(200) NOT NULL,
	content 		TEXT NOT NULL
);

CREATE TABLE comments (
	id 				INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
	post_id 		INTEGER NOT NULL,
	publish_date 	DATETIME NOT NULL,
	content 		TEXT NOT NULL
);]]>
		</programlisting>
		<para>
			Maintenant, il faut configurer le plugin Db pour qu'il ait accès à cette base de données.
			Nous utilisons la méthode <methodname>Atomik::set()</methodname>. Cela vous permet de définir des clés dans la configuration globale.
			Dans le dossier <filename>app/config.php</filename>, ajoutez les lignes suivantes:
		</para>
		<programlisting>
			<![CDATA[
Atomik::set('plugins/Db', array(
	'dsn' 		=> 'mysql:host=localhost;dbname=blog',
	'username' 	=> 'root',
	'password' 	=> ''
));]]>
		</programlisting>
		<para>
			Vous pouvez voir qu'on défini la clé <quote>plugins/Db</quote> comme un array contenant les informations de connexion.
			Modifiez l'hôte, le nom de la base de données, l'identifiant et le mot de passe.
		</para>
		<para>
			C'est tout ce que nous avons besoin pour se connecter à la base de données.
		</para>
	</chapter>
	<chapter id="listing-posts">
		<title>Listé les messages</title>
		<para>
			Avec Atomik une page est faite de deux fichiers : la première est dédiée à la logique applicative, on appelle cela communément une action.
			La seconde est appelé la vue et contient la présentation, dans la plupart des cas, en HTML.
		</para>
		<para>
			Les actions se trouvent dans le dossier <filename>app/actions</filename> et les vues, quant à eux, se trouvent dans le dossier <filename>app/views</filename>.
			Par exemple, pour une page nommée <quote>home</quote>, nous aurions besoin d'un fichier <filename>home.php</filename> dans le dossier des actions
			et un fichier <filename>home.phtml</filename> dans le dossier des vues.
		</para>
		<note>
			Les deux fichiers ne sont pas obligatoire lors de la création d'une page. Au moins l'un d'eux doit exister.
		</note>
		<para>
			La page par défault est nommée index. Nous allons lister les messages sur celle-ci. Nous allons d'abord avoir besoin de récupérer les messages de la base de données.
			Dans le fichier action (<filename>app/actions/index.php</filename>), ajoutez les lignes suivantes:
		</para>
		<programlisting>
			<![CDATA[
<?php
$posts = Atomik_Db::findAll('posts');]]>
		</programlisting>
		<para>
			C'est tout ce qu'on a besoin pour récupérer tous les messages de la base de données! La méthode <methodname>Atomik_Db::findAll()</methodname> 
			prend comme premier argument un nom de table. Ici nous avons spécifié <quote>posts</quote>. Cela retourne un objet <classname>PDOStatement</classname>
			avec toutes les lignes retournées.
		</para>
		<para>
			Les variables définies dans l'action sont automatiquement disponibles dans la vue correspondante. Ainsi, nous pouvons parcourir la variable 
			<varname>$posts</varname> pour lister nos messages.
		</para>
		<programlisting>
			<![CDATA[
<h1>Blog</h1>
<ul>
	<? foreach ($posts as $post): ?>
		<li><?= $post['title'] ?></li>
	<? endforeach; ?>
</ul>
<a href="<?= Atomik::url('add') ?>">Add a new post</a>]]>
		</programlisting>
		<note>
			<para>
				Les balises courtes d'ouverture de PHP seront utilisées dans le code du listing des messages. Vérifiez votre configuration de PHP pour voir si il est supporté sur votre serveur.
			</para>
			<para>
				Comme vous pouvez le constater cette liste utilise également la synthaxe alternative. C'est un conseil quand vous ajoutez du PHP dans les vues pour 
				les rendre plus claires.
			</para>
			<para>
				L'ajout de la page va être descrit dans le chapitre suivant.
			</para>
		</note>
		<para>
			Maintenant, rendez-vous ici: <link xlink:href="http://localhost">http://localhost</link>. Ne vous inquiétez pas si rien ne s'affiche, nous n'avons pas encore créé
			de message.
		</para>
	</chapter>
	<chapter id="creating-posts">
		<title>Créé de nouveaux messages</title>
		<para>
			Nous allons créer une nouvelle page nommée <quote>add</quote>. C'est parti pour la création de la vue
			(<filename>app/views/add.phtml</filename>)!
		</para>
		<programlisting>
			<![CDATA[
<h1>New post</h1>
<form action="" method="post">
	<dl>
		<dt><label for="title">Title:</label></dt>
		<dd><input type="text" name="title" /></dd>
		<dt><label for="content">Content:</label></dt>
		<dd><textarea name="content" rows="10" cols="100"></textarea></dd>
		<dt></dt>
		<dd><input type="submit" /></dd>
	</dl>
</form>]]>
		</programlisting>
		<para>
			Comme vous pouvez le voir, c'est un formulaire HTML très simple. We avons désormais besoin de manipuler les données du formulaire.
			Cela va prendre place dans le fichier action. ().
		</para>
		<para>
			Notre action doit seulement être éxécutée quand il y a des données POST. Atomik vous permet de créer
			des fichier action pour des méthodes HTTP spécifiques. Pour ce faire, suffix le nom de l'action avec un point suivi 
			par la méthode HTTP en minuscule. Notre fichier action va donc se nommer <filename>app/actions/add.post.php</filename>.
		</para>
		<para>
			La première chose que nous avons besoin de faire est de filtrer les données. C'est toujours une étape importante lorsqu'il s'agit de
			données POST pour des raisons de sécurités. Nous allons utiliser <methodname>Atomik::filter()</methodname>.
		</para>
		<para>
			Cette méthode fonctionne dans deux sens: elle peut filtrer une valeur scalaire ou elle peut filtrer un array tout entier.
			Nous allons bien évidemment l'utiliser plus tard quand nous allons flitrer l'array $_POST.
		</para>
		<para>
			Pour filtrer un array, la méthode a besoin de règles. La règle est un array répertoriant les clés
			autorisées dans les données d'entrée. Pour chaque clé, nous pouvons utiliser un filtre et définir si il est requis.
			Le filtre par défault est de sécuriser les chaînes de caractères (FILTER_SANITIZE_STRING) et nous allons utiliser celle-ci.
			Nous allons seulement définir les champs comme requis.
		</para>
		<programlisting>
			<![CDATA[
$rule = array(
	'title' => array('required' => true),
	'content' => array('required' => true)
);]]>
		</programlisting>
		<para>
			Maintenant nous pouvons filtrer les données en utilisant ces règles. Si la validation échoue, la méthode va retourner
			<quote>false</quote>. Dans ce cas, cela générera quelques messages d'erreurs stockés dans <quote>app/filters/messages</quote>.
			Nous pouvons utiliser <methodname>Atomik::flash()</methodname> pour les stocker.
		</para>
		<programlisting>
			<![CDATA[
if (($data = Atomik::filter($_POST, $rule)) === false) {
	Atomik::flash(A('app/filters/messages'), 'error');
	return;
}]]>
		</programlisting>
		<para>
			Vous pouvez remarquer que nous utilisons la fonction <function>A()</function> qui est un alliase de
			<methodname>Atomik::get()</methodname>.
		</para>
		<para>
			Maintenant que nos données ont été validé, nous allons les insérer dans la base de données.
			Nous allons utiliser la méthode <methodname>Atomik_Db::insert()</methodname>.
		</para>
		<programlisting>
			<![CDATA[
$data['publish_date'] = date('Y-m-d h:i:s');
Atomik_Db::insert('posts', $data);]]>
		</programlisting>
		<note>
			Utiliser <function>date()</function> pourrait causer une erreur si la <quote>timezone</quote> n'est pas définie
			dans le <filename>php.ini</filename>. Cela peut être résolu en appelant la fonction
			<function>date_default_timezone_set()</function> lors de l'exécution.
		</note>
		<para>
			Remarquez que nous définissons la <quote>publish_date</quote> avant d'insérer les données.
		</para>
		<para>
			Enfin, nous allons ajouter un <quote>flash message</quote> annonçant que l'opération a été réussi.
			Nous allons aussi rediriger l'utilisateur à la page index.
		</para>
		<programlisting>
			<![CDATA[
Atomik::flash('Post successfully added!', 'success');
Atomik::redirect('index');]]>
		</programlisting>
		<para>
			Vous pouvez retrouver l'action complète ci-dessous
		</para>
		<programlisting>
			<![CDATA[
<?php

$rule = array(
	'title' => array('required' => true),
	'content' => array('required' => true)
);

if (($data = Atomik::filter($_POST, $rule)) === false) {
	Atomik::flash(A('app/filters/messages'), 'error');
	return;
}

$data['publish_date'] = date('Y-m-d h:i:s');
Atomik_Db::insert('posts', $data);

Atomik::flash('Post successfully added!', 'success');
Atomik::redirect('index');]]>
		</programlisting>
	</chapter>
	<chapter id="viewing-posts">
		<title>Visualiser un message</title>
		<para>
			Nous allons maintenant créer un page appelé <quote>view</quote> pour visualiser un seul message.
		</para>
		<para>
			La page va avoir besoin d'un paramètre GET nommé <quote>id</quote> qui doit contenir l'id
			du message. Allons créer le fichier action (<filename>app/actions/view.php</filename>)
			avec ces simples lignes:
		</para>
		<programlisting>
			<![CDATA[
<?php

if (!Atomik::has('request/id')) {
	Atomik::flash('Missing id parameter', 'error');
	Atomik::redirect('index');
}

$post = Atomik_Db::find('posts', array('id' => A('request/id')));]]>
		</programlisting>
		<para>
			D'abors nous vérifions si le paramètre id est défini. Si ce n 'est pas le cas, nous créons un <quote>flash message</quote> et redirigeons 
			l'utilisateur à la page index. Sinon, nous allons chercher le message demandé dans la base de données.
		</para>
		<para>
			La vue (<filename>app/views/view.phtml</filename>) est aussi très simple:
		</para>
		<programlisting>
			<![CDATA[
<h1><?= $post['title'] ?></h1>
<p>
	Publiée le <?= $post['publish_date'] ?>
</p>
<p>
	<?= $post['content'] ?>
</p>]]>
		</programlisting>
		<para>
			Pour terminer, nous allons modifier la vue de l'index pour ajouter un lien sur les titre des messages. Remplacez
			la ligne où le titre du message est écrit par:
		</para>
		<programlisting>
			<![CDATA[
<li>
	<a href="<?= Atomik::url('view', array('id' => $post['id'])) ?>"><?= $post['title'] ?></a>
</li>]]>
		</programlisting>
	</chapter>
	<chapter id="end">
		<title>Fin</title>
		<para>
			Bien joué! Le tutoriel est terminé. Vous pouvez en apprendre davantage dans le  
			<link xlink:href="http://www.atomikframework.com/docs/manual">manuel</link>.
		</para>
		<para>
			Vous pouvez télécharger les sources de ce tutoriel en 
			<link xlink:href="atomik-get-started.zip">cliquant ici</link>.
		</para>
		<para>
			Atomik founit également une application complète type blog comme un plugin. Visitez la section <quote>Plugin</quote> ou
			la documentation pour plus d'informations.
		</para>
	</chapter>
</book>