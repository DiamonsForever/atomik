<?xml version="1.0" encoding="UTF-8"?>
<chapter id="session" xmlns="http://docbook.org/ns/docbook">
	<title>Session</title>
	<para>
		The session plugin provides two things: automatically starts and ends the session and a flash 
		messages mechanism. Flash messages are messages which are available only once and to the next request.
		This allows to pass error or success messages for example. 
	</para>
	<para>
		To create a flash message call the <methodname>Atomik_Session::flash()</methodname> method. It takes as
		first parameter the message. Messages can also have labels. For example <quote>error</quote> or 
		<quote>success</quote>. To specify a label, use the second argument. The default label is <quote>default</quote>.
	</para>
	<example>
		<title>Creating flash messages</title>
		<programlisting>
			<![CDATA[
Atomik_Session::flash('The action has completed successfully');
Atomik_Session::flash('The action has completed successfully', 'success'); // with a label]]>
		</programlisting>
	</example>
	<note>
		It is possible to add a message to the current request instead of the next one by passing true as
		the third argument.
	</note>
	<para>
		Flash messages can then be retreived using <methodname>Atomik_Session::getMessages()</methodname>. This will 
		retrieve all messages whatever the label. The returned array contains as keys the label names and the associated
		values are arrays of messages.
	</para>
	<para>
		 You can also retreive one message only using <methodname>Atomik_Session::getNextMessage()</methodname>. This method
		 will return an array with the first item beign the label and the second the message.
	</para>
	<para>
		Both methods can take as argument a label name to only retreive a message from a specific label. In this case,
		an array of messages is returned for the first method and the message as a string for the second.
	</para>
	<example>
		<title>Retreiving flash messages</title>
		<programlisting>
			<![CDATA[
foreach (Atomik::getMessages() as $label => $messages) {
	foreach ($messages as $message) {
		// ...
	}
}

list($label, $message) = Atomik::getNextMessage();]]>
		</programlisting>
	</example>
	<para>
		Finally, the Session plugin also adds a selector with the <quote>session</quote> namespace. It provides the same way
		of accessing arrays as <methodname>Atomik::get()</methodname>.
	</para>
	<example>
		<title>The session selector</title>
		<programlisting>
			<![CDATA[
$_SESSION['user'] = array('name' => 'paul', 'age' => 20);
A('session:user/name'); // paul]]>
		</programlisting>
	</example>
	<para>
		The plugin also adds a reference to the $_SESSION variable under the session condifuration key.
	</para>
	<example>
		<title>Accessing $_SESSION from the global store</title>
		<programlisting>
			<![CDATA[
Atomik::set('session/user', array('name' => 'paul', 'age' => 20);
A('session/user/name'); // paul]]>
		</programlisting>
	</example>
</chapter>